pipeline {
    agent any
    tools {
        maven 'maven'
    }
    stages {
        stage('V√©rification Structure') {
            steps {
                script {
                    echo "üìÅ Workspace: ${env.WORKSPACE}"
                    
                    // V√©rifier Angular
                    if (!fileExists('angular-frontend/package.json')) {
                        error("‚ùå Le projet Angular n'est pas dans 'angular-frontend'")
                    }
                    
                    // V√©rifier Spring Boot
                    if (!fileExists('springboot-backend/pom.xml') && !fileExists('spring-boot/pom.xml')) {
                        error("‚ùå Aucun projet Spring Boot trouv√© (springboot-backend/ ou spring-boot/)")
                    }
                    
                    echo "‚úÖ Structure OK"
                }
            }
        }
        
        stage('Installation Node.js') {
            steps {
                script {
                    sh '''
                        # T√©l√©charger et installer Node.js localement sans permissions root
                        NODE_VERSION="18.20.4"
                        curl -O https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz
                        tar -xf node-v$NODE_VERSION-linux-x64.tar.xz
                        export PATH="$PWD/node-v$NODE_VERSION-linux-x64/bin:$PATH"
                        
                        echo "Node version: $(node --version)"
                        echo "NPM version: $(npm --version)"
                    '''
                    echo "‚úÖ Node.js install√© localement"
                }
            }
        }
        
        stage('Build Angular') {
            steps {
                dir('angular-frontend') {
                    sh '''
                        # Ajouter Node.js au PATH
                        export PATH="$WORKSPACE/node-v18.20.4-linux-x64/bin:$PATH"
                        
                        # Solution pour l'erreur OpenSSL dans Node.js 18+
                        export NODE_OPTIONS="--openssl-legacy-provider"
                        
                        npm install --force
                        npm run build -- --prod
                    '''
                    echo "‚úÖ Build Angular r√©ussi"
                }
            }
        }
        
        stage('Build Spring Boot') {
            steps {
                script {
                    if (fileExists('springboot-backend/pom.xml')) {
                        dir('springboot-backend') {
                            sh 'mvn clean package -DskipTests'
                        }
                    } else if (fileExists('spring-boot/pom.xml')) {
                        dir('spring-boot') {
                            sh 'mvn clean package -DskipTests'
                        }
                    }
                    echo "‚úÖ Build Spring Boot r√©ussi"
                }
            }
        }
        
        stage('Tests') {
            steps {
                script {
                    if (fileExists('springboot-backend/pom.xml')) {
                        dir('springboot-backend') {
                            sh 'mvn test'
                        }
                    } else if (fileExists('spring-boot/pom.xml')) {
                        dir('spring-boot') {
                            sh 'mvn test'
                        }
                    }
                    echo "‚úÖ Tests pass√©s"
                }
            }
        }
        
        stage('D√©ploiement') {
            steps {
                script {
                    echo "üöÄ D√©ploiement r√©ussi!"
                    if (fileExists('springboot-backend/pom.xml')) {
                        archiveArtifacts artifacts: 'springboot-backend/target/*.jar', fingerprint: true
                    } else if (fileExists('spring-boot/pom.xml')) {
                        archiveArtifacts artifacts: 'spring-boot/target/*.jar', fingerprint: true
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'üéâ Pipeline ex√©cut√© avec succ√®s!'
            // Nettoyage
            sh 'rm -rf node-v* || true'
        }
        failure {
            echo '‚ùå Pipeline √©chou√©. V√©rifiez les logs.'
        }
        always {
            echo 'üîß Nettoyage termin√©'
        }
    }
}
